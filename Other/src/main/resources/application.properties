#服务开放的端口
server.port=8904

#服务名
spring.application.name=user-service
spring.cloud.consul.host=122.51.112.224
#服务注册中心的端口
spring.cloud.consul.port=8500
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.discovery.ip-address=122.51.112.224
#注册到consul的服务名称，后期客户端会根据这个名称来进行服务调用。（feign）
spring.cloud.consul.discovery.serviceName=service-user
spring.cloud.consul.discovery.instance-id=${spring.cloud.consul.discovery.serviceName}:${spring.cloud.consul.discovery.ip-address}:${server.port}
#服务断开后  自动在注册中心注销
spring.cloud.consul.discovery.health-check-critical-timeout=10s

mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.example.cloud

#mysql
spring.datasource.url=jdbc:mysql://122.51.112.224:3306/com_wlw?serverTimezone=Asia/Shanghai&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=jit

#email配置
spring.mail.host=smtp.qq.com
spring.mail.username= 873168698@qq.com
spring.mail.password=avwhmdpoagesbaia
spring.mail.default-encoding=UTF-8
#使用465端口发送
spring.mail.port=465
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false

#redis配置
#Redis服务器地址
spring.redis.host=localhost
#Redis服务器连接端口
spring.redis.port=6379

#连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=50
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=3000
#连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=20
#连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=2
#连接超时时间（毫秒）
spring.redis.timeout=5000

#日志配置
#开启输出日志级别
logging.level.com.jit=trace
#不指定路径，则在当前项目下生成
logging.file=${user.home}/IntPla/service-user.log
#指定文件中日志输出的格式
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} == [%thread] == %-5level == %logger{50} == %msg%n
